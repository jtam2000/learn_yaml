#
# Key Value pairs:
#

# aka scalar
key: value

# KV: strings for keys and values
simplekey: simplevalue

# KV: numeric keys and/or values
23: 45
100: "my age is"
spendmoney: 23.57

# rendering numbers as different types:  use "!!"
age: !!float 23   # result in float value of 23.0
gpa: !!str 3.5    # result in string value of "3.5" and not a number 3.5

# numbers can use number separators "_"
big_numer: 1_000_000.00

# null is an accepted value
myvar: null

# hex value
myhex: 0x34 # decimal value is 52

# octal value
myoct: 056  #decimal value is 46

#other types:
canonical: 1.23015e+3
exponential: 12.3015e+02
fixed: 1230.15
negative infinity: -.inf
not a number: .NaN

#
#String
#
# string can be placed in single or double quotes or no quotes
singlequote: 'single quote line'
doublequote: "double quotes iine"
no quotes: this line has quotes around it

# special characters must be in quotes
newlinechar: "this line has a end of line character \n"


# spaces are preserved even if you don't use quotes
stringLineWithSpaces: this line  has        spaces ....    .......       .....

# Multi-line string
# LEARNING: REMEMBER: "|" looks like stopping, ">" looks like continuing. | = "\n", > = " "
# "|" means concatenated all lines with "\n" after each line, except the last line
#
# "|" is called [Block scalar indicator]
multiline_ConcateateWithNewLine: |
  this is a multiple line
  here is line 2
  here is line3
# resulting value is:
# "this is a multiple line\nhere is line 2\nhere is line3"

# multi-line string: ">" means concatenate all the lines  with a space after each line, except last line
# ">" is  called [Folded] scalar indicator
multiline_ConcateateNoNewLine: >
  this is a multiple line
  here is line 2
  here is line3
# result values is
# "this is a multiple line here is line 2 here is line3 then should appear as is"

# Usage of multi-line yml example: you can specify a shell script as an attribute for example
shellScriptOnOneLine:
  - bash
  - -c
  - |
    #!bin/bash -e
    echo "hello world" ${path}


#
# Boolean
#
myboolean: false
myboolean2: true
YesAsTrue: yes   #translated to true
NoAsFalse: no    #translated to false

OnAsTrue: on    #translated to true
OffAsFalse: off    #translated to false

#
# Date Time
#
datetime: 2001-12-15T02:59:43.1Z
datetime_with_spaces: 2001-12-14 21:59:43.10 -5
date: 2002-12-14


#
#Comments
#
# comments are using the hash
# you can use it at any part of the KV
myage: 23.34    # this is a comment to the right of the KV

# Key Differences: List vs Dictionary
#     Dictionary is unordered
#     List are ordered

#
# Object blocks, aka [Dictionary]: a collection of KV pairs, keys are case sensitive
#
MyObject:
  name: attribute 1
  server: attribute 2
  port: attribute 3

ObjectWithNull:
  name:       # value is null
  server:     # value is null
  port: 9000      # value is 900

# example usage of Blocks:
curl_command:
  command_name: curl
  command_arg:
    firstOption: -c
    descriptionMessage: "this is a curl command"
    sleep: 30   # sleep for 30 seconds

# output in json is this:
#  "curl_command": {
#    "command_arg": {
#      "descriptionMessage": "this is a curl command",
#      "firstOption": "-c",
#      "sleep": 30
#    },
#    "command_name": "curl"
#  }

# example usage of blocks: URL string interpolation can not be done in YML but you can provide
# the parts and let the application construct the full url
# this is good because the config should not have to know the logic to construct a url
# the config should just provide data, not logic(of constructing a full url)
machine: &DEFAULT_MACHINE 129.45.128.1
db: &DEFAULT_DB learnspring

url parts:       # application should use this object block to construct the full url
  mysqlroot:  jdbc:mysql://
  machine: *DEFAULT_MACHINE
  db: *DEFAULT_DB



#
# Lists
#


# LEARNING: the Dash Space is a List Block Indicator, so use it if you want to create a list
#     Remember: Dash is START OF AN ITEM ON A LIST, if you want another item, just start another dash space
#     so construct it like this:
#       - item1: item1 value
#       - item2: item2 value
#
#  LEARNING: all KVs' after start of a Dash Space: is an attribute of that ITEM
#         - itemAttribute1: itemAttribute1Value
#           itemAttribute2: itemAttribute2Value
#           itemAttribute3: itemAttribute3Value

# the above json is the same as this:
MyObject1:
  - name: attribute 1   #IMPORTANT:space needed after dash "-", the dash signal start of a list
    server: server1
    port: 1
                        # you can have blank lines as separators
  - name: attribute 1
    port: 2             #attributes not in same order as item 1
    server: server2

  - somethingdifferent: I can have different mixed attribute in list
    secondattribute: 3
# the above is equivalent to Json below:
#  {
#    "MyObject1": [       # notice the [ ] 's indicating a json list
#    {
#      "server": "server1",
#      "port": 1,
#      "name": "attribute 1"
#    },
#    {
#      "port": 2,
#      "name": "attribute 1",
#      "server": "server2"
#    },
#    {
#      "secondattribute": 3,
#      "somethingdifferent": "I can have different mixed attribute in list"
#    }
#    ]   #notice the closing "]"
#  }

#  sub-lists: 2 ways of using sub-lists
microservices:
  - name: name1
    server: server1
    port: [23, 34, 45]  # sub-list within microservices list

  - name: name2
    server: server1
    port:
      - 100            # another way to using sub-list
      - 200
      - 300

# List can be written in 3 days:
friends:
  - name: Ken  # method 1
    age: 50
  - {name: Daniel, age: 51}  # method 2, this seems to be good way to write compact lists for small # attributes

  -                 # Method 3
    name: yat
    age: 51



#
# Anchor Alias
#  Anchors: "&"    # sets up a variable
#  Alias: "*"      # reference an anchor name
#  Merge: "<<:"     # merge keys from another mapping
#
# 1. you can reference value
myrefValue: &MY_VALUE 2.3   # creates a alias to 2.3 and this alias is called MY_VALUE

usingRef: *MY_VALUE     # usingRef=2.3

# 2. you can reference any entire block
base: &base
  var1: value1
  var2: value2

foo:
  <<: *base  # foo will have {var1: value1, var2: value2}, it will NOT have base
  <<: *MY_VALUE
  addtionalItems: myAddtionalValue



#
# Complex Keys
#
# keys can be complex string, you can use "?" before
# A question mark and space (“? ”) indicate a complex mapping key.
# Within a block collection, key: value pairs can
# start immediately following the dash, colon, or question mark.
#
# Example:
? - Detroit Tigers
  - Chicago cubs
  :
  - 2001-07-23

? [ New York Yankees,
    Atlanta Braves ]
  : [ 2001-07-02, 2001-08-12,
      2001-08-14 ]